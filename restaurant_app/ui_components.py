import customtkinter as ctk
from config import COLORS

class UIComponents:
    def __init__(self, root, animations, data_manager):
        self.root = root
        self.animations = animations
        self.data_manager = data_manager
        
    def create_header(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = ctk.CTkFrame(parent, fg_color=COLORS["card_bg"], height=80)
        header_frame.pack(fill="x", padx=10, pady=10)
        header_frame.pack_propagate(False)
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            header_frame,
            text="",
            font=("Arial", 20, "bold"),
            text_color=COLORS["primary"]
        )
        title_label.place(relx=0.5, rely=0.5, anchor="center")
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_label = ctk.CTkLabel(
            header_frame,
            text=f"üë§ {self.data_manager.current_user}",
            font=("Arial", 12),
            text_color=COLORS["text_secondary"]
        )
        user_label.place(relx=0.02, rely=0.5, anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if self.data_manager.is_admin:
            admin_btn = ctk.CTkButton(
                header_frame,
                text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                command=self.show_admin_panel,
                fg_color=COLORS["secondary"],
                hover_color="#29b6f6",
                width=100,
                height=30
            )
            admin_btn.place(relx=0.85, rely=0.5, anchor="e")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.animations.typewriter_effect(
            title_label, 
            "üçñ REST"
        )
        
        return header_frame
    
    def show_admin_panel(self):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞"""
        from admin_panel import AdminPanel
        AdminPanel(self.root, self.data_manager, self.firebase_manager)
    
    def set_firebase_manager(self, firebase_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Firebase"""
        self.firebase_manager = firebase_manager
    
    def create_online_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤"""
        online_frame = ctk.CTkFrame(parent, fg_color=COLORS["card_bg"])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            online_frame,
            text="üë• –û–ù–õ–ê–ô–ù –í –†–ï–°–¢–û–†–ê–ù–ï",
            font=("Arial", 20, "bold"),
            text_color=COLORS["secondary"]
        )
        title.pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        online_list = ctk.CTkTextbox(
            online_frame, 
            height=60, 
            fg_color=COLORS["dark_bg"],
            text_color=COLORS["text_primary"],
            font=("Arial", 12)
        )
        online_list.pack(fill="x", padx=10, pady=5)
        online_list.insert("1.0", "üü¢ –ó–∞–≥—Ä—É–∑–∫–∞...")
        online_list.configure(state="disabled")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        self.animations.simple_appear(online_frame, 200)
        
        return online_list, online_frame
    
    def create_menu_section(self, parent, order_callback):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –º–µ–Ω—é - —Ç–æ–ª—å–∫–æ –≤–∫–ª–∞–¥–∫–∞ '–í—Å–µ –±–ª—é–¥–∞'"""
        menu_frame = ctk.CTkFrame(parent, fg_color=COLORS["card_bg"])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            menu_frame,
            text="üìã –ú–ï–ù–Æ - –í–°–ï –ë–õ–Æ–î–ê",
            font=("Arial", 20, "bold"),
            text_color=COLORS["success"]
        )
        title.pack(pady=10)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã (—Ç–æ–ª—å–∫–æ "–í—Å–µ –±–ª—é–¥–∞")
        categories = self.data_manager.get_recipes_by_category()
        
        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É "–í—Å–µ –±–ª—é–¥–∞"
        tabview = ctk.CTkTabview(menu_frame, fg_color=COLORS["dark_bg"])
        tabview.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≤–∫–ª–∞–¥–∫–∞
        tabview.add("–í—Å–µ –±–ª—é–¥–∞")
        tab = tabview.tab("–í—Å–µ –±–ª—é–¥–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ñ—Ä–µ–π–º
        scroll_frame = ctk.CTkScrollableFrame(tab, fg_color="transparent")
        scroll_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –±–ª—é–¥ - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨
        recipes_dict = categories["–í—Å–µ –±–ª—é–¥–∞"]
        self.create_category_grid(scroll_frame, recipes_dict, order_callback)
        
        self.animations.simple_appear(menu_frame, 400)
        
        return tabview, menu_frame
    
    def create_category_grid(self, parent, recipes, order_callback):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –±–ª—é–¥"""
        row, col = 0, 0
        for recipe_id, recipe in recipes.items():
            item_frame = self.create_menu_item(parent, recipe, recipe_id, order_callback)
            item_frame.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
            
            col += 1
            if col >= 3:  # 3 –±–ª—é–¥–∞ –≤ —Ä—è–¥—É
                col = 0
                row += 1
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–∞ –∫–æ–ª–æ–Ω–æ–∫
        for i in range(3):
            parent.columnconfigure(i, weight=1)
    
    def create_menu_item(self, parent, recipe, recipe_id, order_callback):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é"""
        item_frame = ctk.CTkFrame(
            parent, 
            fg_color=COLORS["card_bg"], 
            width=200, 
            height=100,
            corner_radius=15
        )
        item_frame.grid_propagate(False)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
        name_label = ctk.CTkLabel(
            item_frame,
            text=recipe["name"],
            font=("Arial", 14, "bold"),
            text_color=COLORS["warning"],
            wraplength=180
        )
        name_label.pack(pady=10)
        
        # –¶–µ–Ω–∞
        price_label = ctk.CTkLabel(
            item_frame,
            text=f"üí∞ ${recipe['price']}",
            font=("Arial", 12),
            text_color=COLORS["text_secondary"]
        )
        price_label.pack(pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞
        order_btn = ctk.CTkButton(
            item_frame,
            text="–ó–ê–ö–ê–ó–ê–¢–¨",
            command=lambda rid=recipe_id: order_callback(rid),
            fg_color=COLORS["primary"],
            hover_color="#e55a2b",
            width=120,
            height=30
        )
        order_btn.pack(pady=8)
        
        return item_frame
    
    def create_orders_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∑–∞–∫–∞–∑–æ–≤"""
        orders_frame = ctk.CTkFrame(parent, fg_color=COLORS["card_bg"])
        
        title = ctk.CTkLabel(
            orders_frame,
            text="üì¶ –ú–û–ò –ó–ê–ö–ê–ó–´",
            font=("Arial", 20, "bold"),
            text_color=COLORS["warning"]
        )
        title.pack(pady=10)
        
        orders_text = ctk.CTkTextbox(
            orders_frame, 
            height=150,
            fg_color=COLORS["dark_bg"],
            text_color=COLORS["text_primary"],
            font=("Arial", 12)
        )
        orders_text.pack(fill="x", padx=10, pady=5)
        orders_text.insert("1.0", "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...")
        orders_text.configure(state="disabled")
        
        self.animations.simple_appear(orders_frame, 600)
        
        return orders_text, orders_frame