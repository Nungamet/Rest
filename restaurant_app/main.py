import customtkinter as ctk
import threading
import time
from datetime import datetime

from config import COLORS, UPDATE_INTERVAL, ADMIN_USERS
from animations import AnimationManager
from data_manager import DataManager
from firebase_manager import FirebaseManager
from ui_components import UIComponents
from notifications import notifier

class RestaurantApp:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("dark-blue")
        
        self.root = ctk.CTk()
        self.root.title("Rest")
        
        # –û–∫–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        self.root.geometry("1200x800")
        self.root.minsize(1000, 700)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        self.center_window()
        
        self.root.resizable(True, True)
        self.root.attributes('-topmost', False)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.data_manager = DataManager()
        self.animations = AnimationManager(self.root)
        self.firebase_manager = FirebaseManager(self.data_manager)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ UI
        self.online_list = None
        self.orders_text = None
        self.is_running = True
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_timer = None
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.ask_username()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
    def ask_username(self):
        """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.login_frame = ctk.CTkFrame(self.root, fg_color=COLORS["dark_bg"])
        self.login_frame.pack(fill="both", expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self.login_frame,
            text="REST",
            font=("Arial", 28, "bold"),
            text_color=COLORS["primary"]
        )
        title_label.pack(pady=30)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        ctk.CTkLabel(
            self.login_frame,
            text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:",
            font=("Arial", 18),
            text_color=COLORS["text_primary"]
        ).pack(pady=10)
        
        self.username_var = ctk.StringVar()
        self.username_entry = ctk.CTkEntry(
            self.login_frame,
            textvariable=self.username_var,
            font=("Arial", 16),
            width=300,
            height=50,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫"
        )
        self.username_entry.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–∞—Ä–æ–ª—è (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
        self.password_frame = ctk.CTkFrame(self.login_frame, fg_color="transparent")
        
        self.password_label = ctk.CTkLabel(
            self.password_frame,
            text="–ü–∞—Ä–æ–ª—å –¥–ª—è Admin:",
            font=("Arial", 14),
            text_color=COLORS["text_secondary"]
        )
        self.password_label.pack(pady=5)
        
        self.password_var = ctk.StringVar()
        self.password_entry = ctk.CTkEntry(
            self.password_frame,
            textvariable=self.password_var,
            font=("Arial", 16),
            width=300,
            height=50,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
            show="*"
        )
        self.password_entry.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        login_btn = ctk.CTkButton(
            self.login_frame,
            text="–ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ö –°–ï–†–í–ï–†–£",
            command=self.login,
            fg_color=COLORS["primary"],
            hover_color="#e55a2b",
            width=250,
            height=50,
            font=("Arial", 16, "bold")
        )
        login_btn.pack(pady=20)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.status_label = ctk.CTkLabel(
            self.login_frame,
            text="üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ",
            font=("Arial", 12),
            text_color=COLORS["error"]
        )
        self.status_label.pack(pady=10)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –∫ –≤—Ö–æ–¥—É –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
        self.username_entry.bind('<Return>', lambda e: self.login())
        self.username_entry.bind('<KeyRelease>', self.on_username_change)
        self.password_entry.bind('<Return>', lambda e: self.login())
        self.username_entry.focus()
    
    def on_username_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = self.username_var.get().strip()
        if username == "Admin":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
            self.password_frame.pack(pady=10)
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
            self.password_frame.pack_forget()
    
    def login(self):
        """–í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        username = self.username_var.get().strip()
        password = self.password_var.get().strip()
        
        if not username:
            notifier.show_notification("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è Admin
        if username == "Admin":
            if password != ADMIN_USERS["Admin"]:
                notifier.show_notification("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è Admin")
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.configure(text="üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...", text_color=COLORS["warning"])
        self.root.update()
        
        try:
            self.data_manager.set_user(username, password)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.ui_components = UIComponents(self.root, self.animations, self.data_manager)
            self.ui_components.set_firebase_manager(self.firebase_manager)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Firebase
            self.firebase_manager.start_listeners(
                self.order_listener,
                self.users_listener
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.configure(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É!", text_color=COLORS["success"])
            self.root.update()
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            self.root.after(1000, self.show_main_interface)
            
        except Exception as e:
            self.status_label.configure(text="üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", text_color=COLORS["error"])
            notifier.show_notification("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
    
    def show_main_interface(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        try:
            self.login_frame.destroy()
        except:
            pass
            
        self.create_main_interface()
        
    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not self.is_running:
            return
            
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            self.main_frame = ctk.CTkScrollableFrame(self.root, fg_color=COLORS["dark_bg"])
            self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.ui_components.create_header(self.main_frame)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.online_list, online_frame = self.ui_components.create_online_section(self.main_frame)
            self.menu_tabs, menu_frame = self.ui_components.create_menu_section(self.main_frame, self.add_order)
            self.orders_text, orders_frame = self.ui_components.create_orders_section(self.main_frame)
            
            # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.start_auto_update()
            
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.load_initial_data()
            
            notifier.show_notification("–£—Å–ø–µ—Ö", "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ!")
            
        except Exception as e:
            notifier.show_notification("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
    
    def load_initial_data(self):
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Firebase
        orders = self.firebase_manager.get_all_orders()
        self.data_manager.sync_orders(orders)
        self.update_orders_display()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        online_users = self.firebase_manager.firebase.get_online_users()
        self.data_manager.update_online_users(online_users)
        self.update_online_users()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∏–∑ Firebase
        self.firebase_manager.firebase.load_menu_to_data_manager(self.data_manager)
    
    def start_auto_update(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if not self.is_running:
            return
            
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.update_timer = self.root.after(UPDATE_INTERVAL, self.start_auto_update)
    
    def add_order(self, recipe_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        if not self.is_running:
            return
            
        try:
            order = self.data_manager.add_order(recipe_id, self.data_manager.current_user)
            success = self.firebase_manager.add_order(order)
            
            if success:
                notifier.show_notification("–£—Å–ø–µ—Ö", f"–ó–∞–∫–∞–∑ '{order['recipe_name']}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫—É—Ö–Ω—é!")
                self.update_orders_display()
            else:
                notifier.show_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
                
        except Exception as e:
            notifier.show_notification("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
    
    def order_listener(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Firebase"""
        if message.get("type") == "orders_update" and self.is_running:
            orders_data = message.get("data", [])
            self.data_manager.sync_orders(orders_data)
            self.update_orders_display()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–∞
            if self.data_manager.is_admin and hasattr(self, 'last_order_count'):
                if len(orders_data) > self.last_order_count:
                    notifier.show_notification("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!")
            
            self.last_order_count = len(orders_data)
    
    def users_listener(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Firebase"""
        if message.get("type") == "users_update" and self.is_running:
            users_data = message.get("data", [])
            self.data_manager.update_online_users(users_data)
            self.update_online_users()
    
    def update_online_users(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω"""
        if self.online_list and self.is_running:
            try:
                self.online_list.configure(state="normal")
                self.online_list.delete("1.0", "end")
                
                # –ò—Å–∫–ª—é—á–∞–µ–º Admin –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω
                online_users = [user for user in self.data_manager.online_users if user != "Admin"]
                
                if online_users:
                    online_text = " | ".join(online_users)
                    status_text = f"üü¢ –û–ù–õ–ê–ô–ù ({len(online_users)}): {online_text}"
                else:
                    status_text = "üü° –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω"
                
                self.online_list.insert("1.0", status_text)
                self.online_list.configure(state="disabled")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω: {e}")
    
    def update_orders_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"""
        if self.orders_text and self.is_running:
            try:
                self.orders_text.configure(state="normal")
                self.orders_text.delete("1.0", "end")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_orders = [order for order in self.data_manager.orders 
                             if order['customer'] == self.data_manager.current_user]
                
                if not user_orders:
                    self.orders_text.insert("1.0", "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å\n\n")
                    self.orders_text.insert("end", "–ó–∞–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –º–µ–Ω—é!")
                else:
                    self.orders_text.insert("1.0", f"üì¶ –í–ê–®–ò –ó–ê–ö–ê–ó–´ ({len(user_orders)}):\n\n")
                    for order in user_orders[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
                        status_emoji = "‚úÖ" if order['status'] == '–ì–æ—Ç–æ–≤–æ' else "‚è≥"
                        order_text = f"{status_emoji} {order['recipe_name']}\n"
                        order_text += f"   ‚è∞ {order['time']} | üí∞ ${order['price']}\n"
                        order_text += f"   üìç {order['status']}\n\n"
                        self.orders_text.insert("end", order_text)
                
                self.orders_text.configure(state="disabled")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
    
    def safe_quit(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.is_running = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        if hasattr(self, 'firebase_manager'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é –≤ Firebase
            self.firebase_manager.firebase.save_menu_from_data_manager(self.data_manager)
            self.firebase_manager.stop()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self.update_timer:
            self.root.after_cancel(self.update_timer)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        self.root.quit()
        self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.safe_quit)
        
        try:
            self.root.mainloop()
        except Exception as e:
            notifier.show_notification("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        finally:
            self.is_running = False

if __name__ == "__main__":
    app = RestaurantApp()
    app.run()