import customtkinter as ctk
from config import COLORS
from notifications import notifier

class AdminPanel:
    def __init__(self, parent, data_manager, firebase_manager):
        self.data_manager = data_manager
        self.firebase_manager = firebase_manager
        self.parent = parent
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        self.window = ctk.CTkToplevel(parent)
        self.window.title("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ê–¥–º–∏–Ω")
        self.window.geometry("1000x700")
        self.window.resizable(True, True)
        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.window.transient(parent)
        self.window.grab_set()
        
        self.create_admin_interface()
    
    def create_admin_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–¥–º–∏–Ω–∞"""
        main_frame = ctk.CTkFrame(self.window, fg_color=COLORS["dark_bg"])
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            main_frame,
            text="‚öôÔ∏è –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê",
            font=("Arial", 20, "bold"),
            text_color=COLORS["primary"]
        )
        title.pack(pady=15)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tabview = ctk.CTkTabview(main_frame, fg_color=COLORS["card_bg"])
        tabview.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
        tabview.add("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
        self.create_orders_tab(tabview.tab("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"))
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
        tabview.add("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é")
        self.create_menu_tab(tabview.tab("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é"))
    
    def create_orders_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        self.orders_frame = ctk.CTkScrollableFrame(parent, fg_color=COLORS["dark_bg"])
        self.orders_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
        self.update_orders_display()
    
    def update_orders_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞"""
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã
        for widget in self.orders_frame.winfo_children():
            widget.destroy()
        
        if not self.data_manager.orders:
            no_orders_label = ctk.CTkLabel(
                self.orders_frame,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                font=("Arial", 16),
                text_color=COLORS["text_secondary"]
            )
            no_orders_label.pack(pady=20)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        active_orders = [order for order in self.data_manager.orders 
                        if order['status'] == "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"]
        
        if not active_orders:
            no_orders_label = ctk.CTkLabel(
                self.orders_frame,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                font=("Arial", 16),
                text_color=COLORS["text_secondary"]
            )
            no_orders_label.pack(pady=20)
            return
        
        for order in active_orders:
            order_frame = ctk.CTkFrame(self.orders_frame, fg_color=COLORS["card_bg"], height=100)
            order_frame.pack(fill="x", padx=5, pady=5)
            order_frame.pack_propagate(False)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            info_text = f"#{order['id']} {order['recipe_name']}\n"
            info_text += f"üë§ {order['customer']} | ‚è∞ {order['time']} | üí∞ ${order['price']}"
            
            info_label = ctk.CTkLabel(
                order_frame,
                text=info_text,
                font=("Arial", 12),
                text_color=COLORS["text_primary"]
            )
            info_label.place(relx=0.05, rely=0.3, anchor="w")
            
            # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            status_label = ctk.CTkLabel(
                order_frame,
                text=f"üìç {order['status']}",
                font=("Arial", 12, "bold"),
                text_color=COLORS["warning"]
            )
            status_label.place(relx=0.05, rely=0.7, anchor="w")
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            btn_frame = ctk.CTkFrame(order_frame, fg_color="transparent")
            btn_frame.place(relx=0.95, rely=0.5, anchor="e")
            
            complete_btn = ctk.CTkButton(
                btn_frame,
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                command=lambda o=order: self.complete_order(o),
                fg_color=COLORS["success"],
                hover_color="#388e3c",
                width=80,
                height=30
            )
            complete_btn.pack(side="left", padx=5)
            
            cancel_btn = ctk.CTkButton(
                btn_frame,
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                command=lambda o=order: self.cancel_order(o),
                fg_color=COLORS["error"],
                hover_color="#c62828",
                width=80,
                height=30
            )
            cancel_btn.pack(side="left", padx=5)
    
    def complete_order(self, order):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞"""
        # Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Windows –¥–ª—è –∏–≥—Ä–æ–∫–∞
        notifier.show_notification(
            "üçΩÔ∏è –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!", 
            f"–í–∞—à –∑–∞–∫–∞–∑ '{order['recipe_name']}' –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!",
            duration=10
        )
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
        self.data_manager.remove_order(order['id'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Firebase
        if self.firebase_manager:
            self.firebase_manager.remove_order(order['id'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update_orders_display()
    
    def cancel_order(self, order):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞"""
        # Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Windows –¥–ª—è –∏–≥—Ä–æ–∫–∞
        notifier.show_notification(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", 
            f"–ó–∞–∫–∞–∑ '{order['recipe_name']}' –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            duration=10
        )
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
        self.data_manager.remove_order(order['id'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Firebase
        if self.firebase_manager:
            self.firebase_manager.remove_order(order['id'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update_orders_display()
    
    def create_menu_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é"""
        main_frame = ctk.CTkFrame(parent, fg_color=COLORS["dark_bg"])
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
        menu_tabview = ctk.CTkTabview(main_frame, fg_color=COLORS["card_bg"])
        menu_tabview.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞
        menu_tabview.add("–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
        self.create_add_dish_tab(menu_tabview.tab("–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ"))
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥
        menu_tabview.add("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–∞")
        self.create_edit_dishes_tab(menu_tabview.tab("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–∞"))
    
    def create_add_dish_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
        add_frame = ctk.CTkFrame(parent, fg_color=COLORS["dark_bg"])
        add_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            add_frame,
            text="–î–û–ë–ê–í–ò–¢–¨ –ù–û–í–û–ï –ë–õ–Æ–î–û –í –ú–ï–ù–Æ",
            font=("Arial", 18, "bold"),
            text_color=COLORS["secondary"]
        )
        title.pack(pady=20)
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞
        form_frame = ctk.CTkFrame(add_frame, fg_color=COLORS["card_bg"])
        form_frame.pack(fill="x", padx=50, pady=20)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
        ctk.CTkLabel(
            form_frame,
            text="üçΩÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:",
            font=("Arial", 14, "bold"),
            text_color=COLORS["text_primary"]
        ).pack(pady=10)
        
        self.dish_name_var = ctk.StringVar()
        dish_name_entry = ctk.CTkEntry(
            form_frame,
            textvariable=self.dish_name_var,
            font=("Arial", 14),
            width=300,
            height=40,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"
        )
        dish_name_entry.pack(pady=10)
        
        # –¶–µ–Ω–∞ –±–ª—é–¥–∞
        ctk.CTkLabel(
            form_frame,
            text="üí∞ –¶–µ–Ω–∞:",
            font=("Arial", 14, "bold"),
            text_color=COLORS["text_primary"]
        ).pack(pady=10)
        
        self.dish_price_var = ctk.StringVar()
        dish_price_entry = ctk.CTkEntry(
            form_frame,
            textvariable=self.dish_price_var,
            font=("Arial", 14),
            width=200,
            height=40,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É"
        )
        dish_price_entry.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_btn = ctk.CTkButton(
            form_frame,
            text="‚ûï –î–û–ë–ê–í–ò–¢–¨ –í –ú–ï–ù–Æ",
            command=self.add_to_menu,
            fg_color=COLORS["success"],
            hover_color="#388e3c",
            width=200,
            height=40,
            font=("Arial", 14, "bold")
        )
        add_btn.pack(pady=20)
        
        # –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª—é–¥
        self.dishes_list = ctk.CTkTextbox(
            form_frame,
            height=150,
            fg_color=COLORS["dark_bg"],
            text_color=COLORS["text_primary"],
            font=("Arial", 12)
        )
        self.dishes_list.pack(fill="x", padx=10, pady=10)
        self.update_dishes_list()
    
    def create_edit_dishes_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥"""
        edit_frame = ctk.CTkFrame(parent, fg_color=COLORS["dark_bg"])
        edit_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            edit_frame,
            text="–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ë–õ–Æ–î–ê",
            font=("Arial", 18, "bold"),
            text_color=COLORS["warning"]
        )
        title.pack(pady=20)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
        self.edit_dishes_frame = ctk.CTkScrollableFrame(edit_frame, fg_color=COLORS["dark_bg"])
        self.edit_dishes_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        self.update_edit_dishes_list()
    
    def update_edit_dishes_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        for widget in self.edit_dishes_frame.winfo_children():
            widget.destroy()
        
        if not self.data_manager.recipes:
            no_dishes_label = ctk.CTkLabel(
                self.edit_dishes_frame,
                text="–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ",
                font=("Arial", 16),
                text_color=COLORS["text_secondary"]
            )
            no_dishes_label.pack(pady=20)
            return
        
        for recipe_id, recipe in self.data_manager.recipes.items():
            dish_frame = ctk.CTkFrame(self.edit_dishes_frame, fg_color=COLORS["card_bg"], height=80)
            dish_frame.pack(fill="x", padx=5, pady=5)
            dish_frame.pack_propagate(False)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ
            info_text = f"#{recipe_id} {recipe['name']} - üí∞ ${recipe['price']}"
            
            info_label = ctk.CTkLabel(
                dish_frame,
                text=info_text,
                font=("Arial", 12),
                text_color=COLORS["text_primary"]
            )
            info_label.place(relx=0.05, rely=0.5, anchor="w")
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            btn_frame = ctk.CTkFrame(dish_frame, fg_color="transparent")
            btn_frame.place(relx=0.95, rely=0.5, anchor="e")
            
            edit_btn = ctk.CTkButton(
                btn_frame,
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                command=lambda rid=recipe_id, r=recipe: self.edit_dish(rid, r),
                fg_color=COLORS["warning"],
                hover_color="#f57c00",
                width=80,
                height=30
            )
            edit_btn.pack(side="left", padx=5)
            
            remove_btn = ctk.CTkButton(
                btn_frame,
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                command=lambda rid=recipe_id: self.remove_dish(rid),
                fg_color=COLORS["error"],
                hover_color="#c62828",
                width=80,
                height=30
            )
            remove_btn.pack(side="left", padx=5)
    
    def edit_dish(self, recipe_id, recipe):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"""
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_window = ctk.CTkToplevel(self.window)
        edit_window.title(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ #{recipe_id}")
        edit_window.geometry("400x300")
        edit_window.transient(self.window)
        edit_window.grab_set()
        
        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        form_frame = ctk.CTkFrame(edit_window, fg_color=COLORS["card_bg"])
        form_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            form_frame,
            text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ #{recipe_id}",
            font=("Arial", 16, "bold"),
            text_color=COLORS["primary"]
        ).pack(pady=10)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
        ctk.CTkLabel(
            form_frame,
            text="–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:",
            font=("Arial", 12),
            text_color=COLORS["text_primary"]
        ).pack(pady=5)
        
        edit_name_var = ctk.StringVar(value=recipe['name'])
        edit_name_entry = ctk.CTkEntry(
            form_frame,
            textvariable=edit_name_var,
            font=("Arial", 12),
            width=300,
            height=35
        )
        edit_name_entry.pack(pady=5)
        
        # –¶–µ–Ω–∞ –±–ª—é–¥–∞
        ctk.CTkLabel(
            form_frame,
            text="–¶–µ–Ω–∞:",
            font=("Arial", 12),
            text_color=COLORS["text_primary"]
        ).pack(pady=5)
        
        edit_price_var = ctk.StringVar(value=str(recipe['price']))
        edit_price_entry = ctk.CTkEntry(
            form_frame,
            textvariable=edit_price_var,
            font=("Arial", 12),
            width=200,
            height=35
        )
        edit_price_entry.pack(pady=5)
        
        def save_changes():
            new_name = edit_name_var.get().strip()
            new_price = edit_price_var.get().strip()
            
            if not new_name or not new_price:
                notifier.show_notification("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
            
            try:
                price = int(new_price)
                if price <= 0:
                    notifier.show_notification("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                    return
            except ValueError:
                notifier.show_notification("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª—é–¥–æ
            self.data_manager.update_recipe(recipe_id, new_name, price)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            self.firebase_manager.firebase.save_menu_from_data_manager(self.data_manager)
            
            notifier.show_notification("–£—Å–ø–µ—Ö", f"–ë–ª—é–¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")
            edit_window.destroy()
            self.update_edit_dishes_list()
            self.update_dishes_list()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = ctk.CTkButton(
            form_frame,
            text="üíæ –°–û–•–†–ê–ù–ò–¢–¨",
            command=save_changes,
            fg_color=COLORS["success"],
            hover_color="#388e3c",
            width=150,
            height=40
        )
        save_btn.pack(pady=20)
    
    def remove_dish(self, recipe_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞"""
        recipe = self.data_manager.recipes[recipe_id]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirm_window = ctk.CTkToplevel(self.window)
        confirm_window.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
        confirm_window.geometry("400x200")
        confirm_window.transient(self.window)
        confirm_window.grab_set()
        
        confirm_frame = ctk.CTkFrame(confirm_window, fg_color=COLORS["card_bg"])
        confirm_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            confirm_frame,
            text=f"–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ?",
            font=("Arial", 16, "bold"),
            text_color=COLORS["error"]
        ).pack(pady=10)
        
        ctk.CTkLabel(
            confirm_frame,
            text=f"#{recipe_id} {recipe['name']} - ${recipe['price']}",
            font=("Arial", 14),
            text_color=COLORS["text_primary"]
        ).pack(pady=10)
        
        def confirm_remove():
            self.data_manager.remove_recipe(recipe_id)
            self.firebase_manager.firebase.save_menu_from_data_manager(self.data_manager)
            notifier.show_notification("–£—Å–ø–µ—Ö", f"–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ: {recipe['name']}")
            confirm_window.destroy()
            self.update_edit_dishes_list()
            self.update_dishes_list()
        
        btn_frame = ctk.CTkFrame(confirm_frame, fg_color="transparent")
        btn_frame.pack(pady=20)
        
        confirm_btn = ctk.CTkButton(
            btn_frame,
            text="‚úÖ –î–ê, –£–î–ê–õ–ò–¢–¨",
            command=confirm_remove,
            fg_color=COLORS["error"],
            hover_color="#c62828",
            width=120,
            height=35
        )
        confirm_btn.pack(side="left", padx=10)
        
        cancel_btn = ctk.CTkButton(
            btn_frame,
            text="‚ùå –û–¢–ú–ï–ù–ê",
            command=confirm_window.destroy,
            fg_color=COLORS["secondary"],
            hover_color="#29b6f6",
            width=120,
            height=35
        )
        cancel_btn.pack(side="left", padx=10)
    
    def update_dishes_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª—é–¥"""
        self.dishes_list.configure(state="normal")
        self.dishes_list.delete("1.0", "end")
        
        if self.data_manager.recipes:
            self.dishes_list.insert("1.0", "üìã –¢–ï–ö–£–©–ï–ï –ú–ï–ù–Æ:\n\n")
            for recipe_id, recipe in self.data_manager.recipes.items():
                self.dishes_list.insert("end", f"‚Ä¢ #{recipe_id} {recipe['name']} - ${recipe['price']}\n")
        else:
            self.dishes_list.insert("1.0", "–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ")
        
        self.dishes_list.configure(state="disabled")
    
    def add_to_menu(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞ –≤ –º–µ–Ω—é"""
        dish_name = self.dish_name_var.get().strip()
        dish_price = self.dish_price_var.get().strip()
        
        if not dish_name or not dish_price:
            notifier.show_notification("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        try:
            price = int(dish_price)
            if price <= 0:
                notifier.show_notification("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                return
        except ValueError:
            notifier.show_notification("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –º–µ–Ω—é
        new_id = self.data_manager.add_recipe(dish_name, price)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        self.firebase_manager.firebase.save_menu_from_data_manager(self.data_manager)
        
        notifier.show_notification("–£—Å–ø–µ—Ö", f"–ë–ª—é–¥–æ '{dish_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–µ–Ω—é –∑–∞ ${price} (ID: {new_id})")
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        self.dish_name_var.set("")
        self.dish_price_var.set("")
        self.update_dishes_list()
        self.update_edit_dishes_list()